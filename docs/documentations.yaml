components:
  securitySchemes:
    apikey:
      type: apiKey
      in: header
      name: apikey

paths:
  /:
    get:
      summary: home page
      tags: [Home]
      description: send plain text "Hello"
      produces:
        - text/plain
      responses:
        200:
          description: send hello
        500:
          description: servers error

  /login:
    post:
      tags: [API]
      summary: create apikey
      description: create apikey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              name:
                type: string
            example:
              name: seva
      produces:
        - text/plain
      responses:
        200:
          description: "sends your apikey"
        201:
          description: "Пользователь создан, сгенерирован API-ключ"
        500:
          description: "Server error"

  /account/delete:
    delete:
      tags: [API]
      security:
        - apikey: []
      summary: delete apikey
      description: delete apikey
      produces:
        - text/plain
      responses:
        200:
          description: deleted your apikey
        403:
          description: no api key
        500:
          description: servers error

  /comments:
    get:
      tags: [Comments]
      summary: see all comments
      description: return all comments
      produces:
        - application/json
      responses:
        200:
          description: sends an array of comment objects
        500:
          description: servers error
    post:
      security:
        - apikey: []
      tags: [Comments]
      summary: create new comment
      description: create comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              name:
                type: string
              text:
                type: string
            example:
              name: seva
              text: good comment
      produces:
        - text/plain
      responses:
        200:
          description: sends text "comment create"
        400:
          description: no valid data
        403:
          description: no api key
        500:
          description: servers error

  /comments/{id}:
    get:
      tags: [Comments]
      summary: see one comment
      description: return comment
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Numeric ID of the comment to get.
      responses:
        200:
          description: sends json comment
        406:
          description: no valid id
        500:
          description: servers error

  /models:
    get:
      tags: [Models]
      summary: see all models
      description: return all models with their names and id
      produces:
        - application/json
      responses:
        200:
          description: sends an array of models objects
          content:
            application/json:
              schema:      # Request body contents
                type: object
                properties:
                  _id:
                    type: string
                  name_model:
                    type: string
              example:   # Sample object
                _id: 10
                name_model: Triangle
        404:
          description: No models in database
        500:
          description: servers error
    post:
      security:
        - apikey: []
      tags: [Models]
      summary: create new model
      description: create model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              name:
                type: string
              name_model:
                type: string
              type:
                type: string
              model:
                type: object
              descriptions:
                type: string
              comments:
                type: string
            example:
              name: seva
              name_model: cube
              type: 3d
              model: {data: "12431814828142441"}
              descriptions: good cube
              comments: good 3d model
      produces:
        - text/plain
      responses:
        201:
          description: "Возвращает ID созданной модели"
        400:
          description: no valid data
        403:
          description: no api key
        500:
          description: servers error

  /models/{id}:
    get:
      summary: see one models
      tags: [Models]
      description: return model
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Numeric ID of the model to get.
      responses:
        200:
          description: sends json model
          content:
            application/json:
              schema:      # Request body contents
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  name_model:
                    type: string
                  type:
                    type: string
                  model:
                    type: object
                  descriptions:
                    type: string
                  comments:
                    type: string
                  time_create:
                    type: string
                  last_update:
                    type: string
              example:   # Sample object
                _id: 10
                name: Seva
                name_model: Triangle
                type: 3d
                model: {data: "12431814828142441"}
                descriptions: triangle in 3d
                comments: good triangle
                time_create: 2023-04-27T10:09:21.597Z
                last_update: 2023-04-27T10:09:21.597Z
        400:
          description: no valid data
        406:
          description: no valid id
        500:
          description: servers error
    put:
      security:
        - apikey: []
      tags: [Models]
      summary: update model
      description: update model
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Numeric ID of the model to get.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              name:
                type: string
              name_model:
                type: string
              type:
                type: string
              model:
                type: object
              descriptions:
                type: string
              comments:
                type: array
            example:
              name: seva
              name_model: cube
              type: 3d
              model: { data: "12431814828142441" }
              description: good cube
              comments: ["good 3d model"]
      produces:
        - text/plain
      responses:
        200:
          description: update model
        400:
          description: no valid data
        403:
          description: no api key
        406:
          description: no valid id
        500:
          description: servers error
    delete:
      security:
        - apikey: []
      tags: [Models]
      summary: delete model
      description: delete model
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Numeric ID of the model to get.
      responses:
        200:
          description: delete model
        403:
          description: no api key
        404:
          description: model not find in database
        406:
          description: no valid id
        500:
          description: server error